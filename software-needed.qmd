---
engine: knitr
jupyter: python3
---
# Software Needed {#sec-software-needed}

## R and RStudio

{{< include sections/_r-rstudio-installation.qmd >}}

## Git and a GitHub Account

<br/> ![in case of fire](assets/in_case_of_fire2.png){fig-align="left" width="50%"}

What is version control?

> Version control, also known as source control, is the practice of tracking and managing changes to software code. Version control systems are software tools that help software teams manage changes to source code over time[^git-and-github-1].

[^git-and-github-1]: from the Atlassian webpage on [What is version control?](https://www.atlassian.com/git/tutorials/what-is-version-control)

You can get all you need to know about git from the [Pro Git Book](https://git-scm.com/book/en/v2). This is a great introduction to version control and git. 

### User Manual

[Happy Git and GitHub for the useR](https://happygitwithr.com/)

This is an excellent resource for all things Git, GitHub, and RStudio. Use the left navigation to Quickly find relevant topics for how to integrate Git and GitHub with RStudio.


::: callout-tip
We will use `git` within RStudio. On macOS, RStudio will echo the mac terminal. I am using [Oh My Zsh](https://ohmyz.sh/) as my `zsh` framework, and [Wezterm](https://wezfurlong.org/wezterm/index.html) as my terminal emulator rather than the macOS default terminal application. I also have the latest `git` version installed through [Homebrew](https://brew.sh/). I installed the [Starship](https://starship.rs/) prompt (using Homebrew) to customize my terminal environment.  

This means that I need to adjust the settings in RStudio to use my `zsh` environment. Go to *Tools* → *Global Options* → *Terminal* and choose `Zsh` from the drop-down menu for the *New terminals open with* option.
:::

### Git Tutorials

::: {.callout-important}

Here are the learning objectives for the git section. After taking the tutorials, you will be able to:

1. Create a GitHub account.
2. Install Git on your local computer.
3. Create `ssh` keys to connect your local computer to GitHub.
4. Create a project and push it to GitHub.
5. Fork a project from GitHub.

:::

#### Videos

- [Git and GitHub for Beginners - Crash Course](https://www.youtube.com/watch?v=RGOj5yH7evk)
- [Git Tutorial for Absolute Beginners](https://www.youtube.com/watch?v=CvUiKWv2-C0)
- [How to setup SSH in GitHub by example](https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/GitHub-SSH-Key-Setup-Config-Ubuntu-Linux)
- [How to SSH into GitHub on Windows example](https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/GitHub-SSH-Windows-Example)
- [How to Fork a GitHub Repository](https://www.freecodecamp.org/news/how-to-fork-a-github-repository/)

#### Text-based

- [Learn the Basics of Git in Under 10 Minutes](https://www.freecodecamp.org/news/learn-the-basics-of-git-in-under-10-minutes-da548267cc91/)
- [How to Fork a GitHub Repository](https://www.freecodecamp.org/news/how-to-fork-a-github-repository/)
- [Fork a repository](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/fork-a-repo)


#### More Guides to Git

- [Introduction to Version Control ](https://www.atlassian.com/git/tutorials/what-is-version-control)
  This is hosted by Atlassian, a company that uses their own cloud-based git repository called BitBucket. We will be using GitHub for all our work, so if you try tutorials on this site, remember to use `github` instead of `bitbucket` when connecting to the remote repository. Focus on the *Beginner* and *Getting Started* sections. 
- [Git and GitHub](https://github.com/carpentries-incubator/reproducible-publications-quarto/blob/main/setup.md)
- [An "adavanced beginner" guide to git](https://think-like-a-git.net/sections/about-this-site.html)

## Install Git

### macOS and Linux

Git is pre-installed on macOS and Linux computers, but users may want to update to the latest version.

On Macs, installation of Git is easiest using a package manager like [Homebrew](https://brew.sh/). If you do not have Homebrew installed, follow the instructions on the [Homebrew homepage](https://brew.sh/). Then install Git with:

``` bash
brew install git
```

Check the installation by opening the terminal tab in RStudio (or use whatever terminal you already have open) and entering:

``` zsh
git --version
```

#### Set the git path in RStudio

To get RStudio to use the updated Git, you need to tell RStudio where to find the newly installed Git. First, get the path to the Git executable by typing:

``` zsh
which git
```

![RStudio Terminal window](assets/git-version.png){.lightbox fig-align="left" width="60%"}


Next, in RStudio, go to *Tools* → *Global Options*. You will get the menu in *(a)*:

::: {#fig-git layout-ncol="1" layout-valign="left"}
![Global Options](assets/git-path.png){#fig-options .lightbox}

![git path](assets/git-path-browse.png){#fig-path .lightbox}

Setting the Git path in RStudio
:::

1.  Choose *Git/SVN*.
2.  Browse to `git` using the path obtained from the `which git` command. See *(b)*, above.
3.  Click *Apply*.
4.  Click *OK*.

::: callout-note
The `git` executable in `/opt/homebrew/bin/git` is an alias that points to `/opt/homebrew/Cellar/git/2.45.0/bin/git`. When you browse to `/opt/homebrew/bin/git`, it gets resolved to the correct path.
:::

Now RStudio will use the updated Git.

### Windows

Windows users should go to the [Git website](https://git-scm.com/) to get the latest Windows build.


## Get a GitHub Account

### Linking RStudio to GitHub

#### ssh keys

See [Chapter 10 Set up keys for SSH](https://happygitwithr.com/ssh-keys). I already have a key pair that I have used for GitHub.

1.  Add key to `ssh-agent`. Use the following command in the terminal:

    ``` bash
    eval "$(ssh-agent -s)"
    ```

    You should see a response like the following, except the `pid` number will likely be different.

    ``` bash
    Agent pid 15360
    ```

2.  If you use MacOS \> 10.12.1, create a file `~/.ssh/config` with the following contents:

    ``` bash
    Host *
    AddKeysToAgent yes
    UseKeychain yes
    IdentityFile ~/.ssh/id_ed25519
    ```

3.  Add your key to the `ssh-agent`.

    ``` bash
    ssh-add --apple-load-keychain ~/.ssh/id_ed25519
    ```

    You should now be able to push to GitHub!

If you are asked for a username and password after setting ssh keys, try the following:

``` bash
git remote -v
origin  https://github.com/dgoppenheimer/notebook-template.git (fetch)
origin  https://github.com/dgoppenheimer/notebook-template.git (push)
```

If you get the `https://...` response from git, then you need to change how you access the remote repository.

``` bash
git remote set-url origin git@github.com:dgoppenheimer/notebook-template.git
```

Now, you should be able to push without needed to enter a username/password.

## Get the Notebook

1.  Ask to be a collaborator on the `notebook-template` repository.

2.  Click the *notifications* icon on GitHub.

    ![](assets/github-notification1.png){.lightbox fig-align="left" width="75%"}

3.  On the notifications page, click the *invitation to join ...* row.

    ![](/assets/github-colab.png){.lightbox fig-align="left" width="75%"}

4.  Click the *Accept* button to accept the invitation.

    ![](assets/github-accept.png){.lightbox fig-align="left" width="75%"}

5.  Click the *Fork* button to create your own fork of this project.

    ![](assets/github-fork.png){.lightbox fig-align="left" width="75%"}

6.  Give the project a new name. Use a name that describes the project (Hif1alpha, p53TAD, etc.). Here I chose `test-fork-notebook` because I am using this fork for testing purposes. Then click *Create fork*.

    ![](assets/github-fork-name.png){.lightbox fig-align="left" width="75%"}

    Now you have your own copy of the Notebook template.

7.  Clone the forked repository. On your local computer, Create a new project in RStudio. The *New Project Wizard* will open. Choose the *Version Control* option.

    ![](assets/rstudio-new-project.png){.lightbox fig-align="left" width="75%"}

8.  Choose the *Git* option.

    ![](assets/rstudio-git-project.png){.lightbox fig-align="left" width="75%"}

9.  Go to your repository page on GitHub in your browser.

    1.  Click the *Code* button.
    2.  Choose *HTTPS*.
    3.  Copy the URL to your clipboard.

    ![](assets/github-project-url.png){.lightbox fig-align="left" width="75%"}

10. Go back to the *RStudio New Project Wizard* window.

    1.  Paste in the URL that you copied from your GitHub project page.
    2.  Choose a name for the directory for the project. I usually make the directory name the same as the GitHub project name, in this case, `test-fork-notebook`.
    3.  Click *Create Project*. The project will be cloned into the directory that you specified.

    ![](assets/rstudio-git-project2.png){.lightbox fig-align="left" width="75%"}

    You now have your new project in your local directory linked to the repository in GitHub. Make changes/additions, do `git add .`, `git commit -m "added new files"`, and `git push`, to push the changes to GitHub.

## Keeping the forked Notebook in sync with the original project

Hopefully you will not need to do this often, but the steps below will import any changes to the original project while keeping all the changes you have made to the forked project.

### Define the `upstream` repository

From [GitHub Docs Configuring a remote repository for a fork](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/configuring-a-remote-repository-for-a-fork).

1.  Open Terminal.

2.  List the current configured remote repository for your fork.

    ``` bash
    $ git remote -v
    > origin  https://github.com/YOUR-USERNAME/YOUR-FORK.git (fetch)
    > origin  https://github.com/YOUR-USERNAME/YOUR-FORK.git (push)
    ```

3.  Specify a new remote `upstream` repository that will be synced with the fork. This is the original repository that we created our fork from.

    ``` bash
    git remote add upstream https://github.com/dgoppenheimer/notebook-template.git
    ```

4.  Verify the new upstream repository you've specified for your fork.

    ``` bash
    git remote -v
    origin  https://github.com/dgo-testing/test-fork-notebook.git (fetch)
    origin  https://github.com/dgo-testing/test-fork-notebook.git (push)
    upstream https://github.com/dgoppenheimer/notebook-template.git (fetch)
    upstream https://github.com/dgoppenheimer/notebook-template.git (push)
    ```

### Sync the upstream repository with your fork

1.  Fetch the branches and their respective commits from the upstream repository. Commits to `BRANCH-NAME` will be stored in the local branch `upstream/BRANCH-NAME`.

    ``` bash
    $ git fetch upstream
    > From https://github.com/dgoppenheimer/notebook-template
    > * [new branch]      main       -> upstream/main
    ```

    I made some changes to `notebook-template` and committed, and pushed to GitHub.

    ``` bash
    $ git fetch upstream
    remote: Enumerating objects: 18, done.
    > remote: Counting objects: 100% (18/18), done.
    > remote: Compressing objects: 100% (13/13), done.
    > remote: Total 14 (delta 1), reused 14 (delta 1), pack-reused 0
    > Unpacking objects: 100% (14/14), 1.71 MiB | 4.75 MiB/s, done.
    > From https://github.com/dgoppenheimer/notebook-template
    >    dae15a8..c1a638a  main       -> upstream/main
    ```

2.  Check out your fork's local default branch - in this case, we use `main.`

    ``` bash
    $ git checkout main
    > Switched to branch 'main'
    ```

3.  Merge the changes from the upstream default branch - in this case, `upstream/main` - into your local default branch. This brings your fork's default branch into sync with the upstream repository, without losing your local changes.

    ``` bash
    git merge upstream/main -m "updating fork from upstream"
    ```

### Assessments

Let's see what you have learned. You should have accomplished all of the tasks below if you were successful with the tasks listed above.

1. Fork the `notebook-template` project from GitHub.
2. Rename the project `<your last name>-notebook` (without the `< >` symbols).
3. Push your new project (your notebook) back to GitHub.
4. Create a new quarto document titled: "My Notebook". You can use this document to take notes, or whatever.
  - Update the `_quarto.yml` file so that your document can be found in the table of contents. 
5. Add and commit the project to your local repository.
6. Push the changes to your remote repository.
5. Invite me to clone the your notebook. Use `oppenhe@ufl.edu`.


## VS Code

{{< include sections/_vs-code-installation.qmd >}}

## Zotero

{{< include sections/_zotero-installation.qmd >}}

## ChimeraX

{{< include sections/_chimerax-installation.qmd >}}

## RealVNC Viewer

To connect to NMRbox to run GROMACS simulations, you need to install VNC software. VNC is an abbreviation of Virtual Network Computing, which is another way to say screen sharing. NMRbox uses RealVNC Server to which we can connect using the client software, [RealVNC Viewer](https://www.realvnc.com/en/connect/download/viewer/).

[Download](https://www.realvnc.com/en/connect/download/viewer/) and install the software following the onscreen instructions (for macOS, drag the app to the *Applications* folder).

To connect to NMRBox using the RealVNC Viewer software, follow the instructions at [Use of NMRbox virtual machines (VMs)](https://www.bonvinlab.org/education/molmod_online/#use-of-nmrbox-virtual-machines-vms).

#### Troubleshooting

copy and paste to NMRbox stops working
:   (macOS) Open the VNC Viewer app on your local computer. Go to *VNC Viewer* → *Preferences* → *Expert*. Filter the list by typing `Clipboard` into the *Filter* box. For the *Parameter:* `ClipboardKeystrokesEnable` change the *Value:* to `1`. Click *Apply*, then click *Okay*. Restart VNC Viewer.

::: {.callout-note}

The fixes below did not work for me using Real VNC Viewer. 

- In Terminal on NMRbox, type the following: `vncconfig &` and hit return. Leave the config settings window open. See [How to fix VNC Viewer copy-paste not working](https://www.anyviewer.com/how-to/vnc-viewer-copy-paste-2578.html) for additional help.
- If copy and paste still don't work, check terminal number `n` (use `tty`) and run `vncconfig -display :n &`.
- These do not appear to work on NMRbox. I get the error: `vncconfig not found`.
:::

::: {.callout-tip}
A viable workaround is to create a `.txt` file on your local machine with the list of GROMACS commands that you want to paste into NMRbox. Transfer the file to your working directory on NMRbox, and open it with the text editor, *Sublime Text*. Then you can cut and paste between *Sublime Text* and *Terminal* on NMRbox.
:::

## Optional Software

### Anaconda

#### Update Homebrew

In terminal:

```{zsh}
#| eval: false
#| echo: true
#| filename: "Terminal"

cd ~
brew update       # <1>
brew upgrade      # <2>
```

1.  Update the Homebrew package manager.
2.  Upgrade the packages in Homebrew. *Note*: This can take a long time (hours) depending on how many packages need upgrading.

#### Install Anaconda

```{zsh}
#| eval: false
#| echo: true
#| filename: "Terminal"

brew install --cask anaconda
```

After installation is complete, add the path to `.zshrc` and restart shell.

```{zsh}
#| eval: false
#| echo: true
#| filename: "Terminal"

echo 'export PATH="/usr/local/Homebrew/anaconda3/bin:$PATH"' >> ~/.zshrc
source ~/.zshrc
```

#### Activate Anaconda

```{zsh}
#| eval: false
#| echo: true
#| filename: "Terminal"

source /usr/local/Homebrew/anaconda3/bin/activate   # <1>
conda init zsh    # <2>
```

1.  Use the path to the Homebrew-installed Anaconda.
2.  Initialize your preferred shell to work with `conda.`

Test the installation.

```{zsh}
#| eval: false
#| echo: true
#| filename: "Terminal"

conda --version
conda 25.4.0
```

✅ Success!

#### Create and activate a `conda` Environment for the Plumed Masterclass Tutuorial

```{zsh}
#| eval: false
#| echo: true
#| filename: "Terminal"

conda create --name plumed-masterclass-2022
```

Activate the environment with:

```{zsh}
#| eval: false
#| echo: true
#| filename: "Terminal"

conda activate plumed-masterclass-2022
```

::: callout-note
To deactivate an active environment, use

```{zsh}
#| eval: false
#| echo: true
#| filename: "Terminal"

conda deactivate
```
:::
